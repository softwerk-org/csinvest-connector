# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-05-09T20:27:18+00:00

from __future__ import annotations

from typing import Any
from pydantic import BaseModel, Field, field_validator


class InventoryItem(BaseModel):
    id: str
    classid: str
    instanceid: str
    amount: str
    hide_in_china: int
    pos: int


class Description(BaseModel):
    type: str | None
    value: str | None
    name: str | None
    color: str | None = None


class Action(BaseModel):
    type: str | None
    name: str | None
    link: str | None


class MarketAction(Action):
    pass


class Tag(BaseModel):
    internal_name: str | None
    name: str | None
    category: str | None
    category_name: str | None
    color: str | None = None


class AppInfo(BaseModel):
    appid: int | None
    name: str | None
    icon: str | None
    link: str | None


class RGDescription(BaseModel):
    appid: int
    classid: str
    instanceid: str
    contextid: str | None = None
    assetid: str | None = None
    icon_url: str | None
    icon_drag_url: str | None
    name: str | None
    market_hash_name: str | None
    market_name: str | None
    name_color: str | None
    background_color: str | None
    type: str | None
    tradable: int | None
    marketable: int | None
    commodity: int | None
    market_tradable_restriction: str | None
    market_marketable_restriction: str | None
    descriptions: list[Description] = Field(default_factory=list)
    actions: list[Action] = Field(default_factory=list)
    market_actions: list[MarketAction] = Field(default_factory=list)
    tags: list[Tag] = Field(default_factory=list)

    @field_validator("descriptions", "actions", "market_actions", "tags", mode="before")
    def _ensure_list(cls, v):
        if v is None:
            return []
        if isinstance(v, dict):
            return list(v.values())
        return v


class PartnerInventory(BaseModel):
    success: bool
    error: str | None = None
    rg_inventory: dict[str, InventoryItem] = Field(default_factory=dict, alias="rgInventory")
    rg_currency: Any | None = Field(None, alias="rgCurrency")
    rg_descriptions: dict[str, RGDescription] = Field(default_factory=dict, alias="rgDescriptions")
    rg_app_info: AppInfo | None = Field(None, alias="rgAppInfo")
    more: bool | None = None
    more_start: bool | None = None
