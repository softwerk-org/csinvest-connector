# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-05-09T20:27:18+00:00

from __future__ import annotations

from typing import Any, List, Optional
from pydantic import BaseModel, Field


class InventoryItem(BaseModel):
    id: str
    classid: str
    instanceid: str
    amount: str
    hide_in_china: int
    pos: int


class Description(BaseModel):
    type: Optional[str]
    value: Optional[str]
    name: Optional[str]
    color: Optional[str] = None


class Action(BaseModel):
    type: Optional[str]
    name: Optional[str]
    link: Optional[str]


class MarketAction(Action):
    pass


class Tag(BaseModel):
    internal_name: Optional[str]
    name: Optional[str]
    category: Optional[str]
    category_name: Optional[str]
    color: Optional[str] = None


class AppInfo(BaseModel):
    appid: Optional[int]
    name: Optional[str]
    icon: Optional[str]
    link: Optional[str]


class RGDescription(BaseModel):
    appid: int
    classid: str
    instanceid: str
    contextid: str
    assetid: str
    icon_url: Optional[str]
    icon_drag_url: Optional[str]
    name: Optional[str]
    market_hash_name: Optional[str]
    market_name: Optional[str]
    name_color: Optional[str]
    background_color: Optional[str]
    type: Optional[str]
    tradable: Optional[int]
    marketable: Optional[int]
    commodity: Optional[int]
    market_tradable_restriction: Optional[str]
    market_marketable_restriction: Optional[str]
    descriptions: List[Description]
    actions: List[Action]
    market_actions: List[MarketAction]
    tags: List[Tag]


class GetPartnerInventory(BaseModel):
    success: bool
    rg_inventory: List[InventoryItem] = Field(..., alias="rgInventory")
    rg_currency: Optional[List[Any]] = Field(None, alias="rgCurrency")
    rg_descriptions: List[RGDescription] = Field(..., alias="rgDescriptions")
    rg_app_info: Optional[AppInfo] = Field(None, alias="rgAppInfo")
    more: Optional[bool]
    more_start: Optional[bool]
