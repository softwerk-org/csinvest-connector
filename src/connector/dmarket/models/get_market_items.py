# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-05-09T20:58:22+00:00

from __future__ import annotations

from enum import Enum


from pydantic import BaseModel, Field


class TypeModel(Enum):
    item = "item"
    offer = "offer"
    target = "target"
    class_ = "class"
    airdrop = "airdrop"
    sale = "sale"
    product = "product"


class StatusModel(Enum):
    default = "default"
    active = "active"
    inactive = "inactive"
    in_transfer = "in_transfer"
    sold = "sold"
    recalled = "recalled"
    unavailable = "unavailable"
    locked = "locked"


class GameType(Enum):
    blockchain = "blockchain"
    steam = "steam"


class ExtraDoc(Enum):
    viewAtSteam = "viewAtSteam"
    quality = "quality"
    exterior = "exterior"
    category = "category"
    tradeLock = "tradeLock"
    tradeLockDuration = "tradeLockDuration"
    stickers = "stickers"
    itemType = "itemType"
    floatValue = "floatValue"
    inspectInGame = "inspectInGame"
    tagName = "tagName"
    hero = "hero"
    gems = "gems"
    rarity = "rarity"
    serialNumber = "serialNumber"
    ability = "ability"
    videos = "videos"
    subscribers = "subscribers"
    growth = "growth"
    nameColor = "nameColor"
    backgroundColor = "backgroundColor"
    tradable = "tradable"
    withdrawable = "withdrawable"
    depositable = "depositable"
    offerId = "offerId"
    orderId = "orderId"
    isNew = "isNew"
    groupId = "groupId"
    gameId = "gameId"
    name = "name"  # type: ignore
    categoryPath = "categoryPath"
    class_ = "class"
    collection = "collection"
    grade = "grade"
    type = "type"


class Exterior(Enum):
    field_tested = "field-tested"
    minimal_wear = "minimal wear"
    battle_scarred = "battle-scarred"
    well_worn = "well-worn"
    factory_new = "factory new"
    not_painted = "not painted"


class CSSticker(BaseModel):
    image: str
    name: str


class Dota2Gem(BaseModel):
    image: str
    name: str
    type: str


class Prices(BaseModel):
    DMC: str
    USD: str


class Recommendations(BaseModel):
    d3: Prices
    d7: Prices
    d7Plus: Prices


class OwnerDetails(BaseModel):
    avatar: str
    id: str
    wallet: str


class Extra(BaseModel):
    ability: str | None = None
    background_color: str | None = Field(None, alias="backgroundColor")
    category: str | None = None
    category_path: str | None = Field(None, alias="categoryPath")
    class_: list[str | None] | None = Field(None, alias="class")
    collection: list[str | None] | None = None
    exterior: Exterior | None = None
    float_value: float | None = Field(None, alias="floatValue")
    game_id: str | None = Field(None, alias="gameId")
    gems: list[Dota2Gem | None] | None = None
    grade: str | None = None
    group_id: str | None = Field(None, alias="groupId")
    growth: float | None = None
    hero: str | None = None
    inspect_in_game: str | None = Field(None, alias="inspectInGame")
    is_new: bool | None = Field(None, alias="isNew")
    item_type: str | None = Field(None, alias="itemType")
    link_id: str | None = Field(None, alias="linkId")
    name: str
    name_color: str | None = Field(None, alias="nameColor")
    offer_id: str | None = Field(None, alias="offerId")
    quality: str | None = None
    rarity: str | None = None
    serial_number: int | None = Field(None, alias="serialNumber")
    stickers: list[CSSticker | None] | None = None
    subscribers: int | None = None
    tag_name: str | None = Field(None, alias="tagName")
    tradable: bool
    trade_lock: int | None = Field(None, alias="tradeLock")
    trade_lock_duration: int | None = Field(None, alias="tradeLockDuration")
    type: str | None = None
    videos: int | None = None
    view_at_steam: str | None = Field(None, alias="viewAtSteam")
    withdrawable: bool | None = None


class Item(BaseModel):
    amount: int
    class_id: str = Field(..., alias="classId")
    created_at: int = Field(..., alias="createdAt")
    description: str
    discount: int
    extra: Extra
    extr_doc: ExtraDoc | None = Field(None, alias="extraDoc")
    game_id: str | None = Field(None, alias="gameId")
    game_type: GameType = Field(..., alias="gameType")
    image: str
    in_market: bool = Field(..., alias="inMarket")
    instant_price: Prices | None = Field(None, alias="instantPrice")
    instant_target_id: str = Field(..., alias="instantTargetId")
    item_id: str = Field(..., alias="itemId")
    lock_status: bool = Field(..., alias="lockStatus")
    owner: str
    owner_details: OwnerDetails = Field(..., alias="ownerDetails")
    owners_blockchain_id: str = Field(..., alias="ownersBlockchainId")
    price: Prices | None = None
    recommended_price: Recommendations | None = Field(None, alias="recommendedPrice")
    slug: str
    status: StatusModel
    suggested_price: Prices | None = Field(None, alias="suggestedPrice")
    title: str
    type: TypeModel


class Total(BaseModel):
    offers: int | None
    targets: int | None
    closed_targets: int | None = Field(None, alias="closedTargets")


class MarketItems(BaseModel):
    cursor: str | None = None
    objects: list[Item]
    total: Total | None = None
